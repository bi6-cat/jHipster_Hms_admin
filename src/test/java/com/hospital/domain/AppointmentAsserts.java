package com.hospital.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AppointmentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppointmentAllPropertiesEquals(Appointment expected, Appointment actual) {
        assertAppointmentAutoGeneratedPropertiesEquals(expected, actual);
        assertAppointmentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppointmentAllUpdatablePropertiesEquals(Appointment expected, Appointment actual) {
        assertAppointmentUpdatableFieldsEquals(expected, actual);
        assertAppointmentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppointmentAutoGeneratedPropertiesEquals(Appointment expected, Appointment actual) {
        assertThat(actual)
            .as("Verify Appointment auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppointmentUpdatableFieldsEquals(Appointment expected, Appointment actual) {
        assertThat(actual)
            .as("Verify Appointment relevant properties")
            .satisfies(a -> assertThat(a.getAppointmentDate()).as("check appointmentDate").isEqualTo(expected.getAppointmentDate()))
            .satisfies(a -> assertThat(a.getStartTime()).as("check startTime").isEqualTo(expected.getStartTime()))
            .satisfies(a -> assertThat(a.getEndTime()).as("check endTime").isEqualTo(expected.getEndTime()))
            .satisfies(a -> assertThat(a.getReason()).as("check reason").isEqualTo(expected.getReason()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()))
            .satisfies(a -> assertThat(a.getLocation()).as("check location").isEqualTo(expected.getLocation()))
            .satisfies(a -> assertThat(a.getAppointmentType()).as("check appointmentType").isEqualTo(expected.getAppointmentType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppointmentUpdatableRelationshipsEquals(Appointment expected, Appointment actual) {
        assertThat(actual)
            .as("Verify Appointment relationships")
            .satisfies(a -> assertThat(a.getPatient()).as("check patient").isEqualTo(expected.getPatient()))
            .satisfies(a -> assertThat(a.getDoctor()).as("check doctor").isEqualTo(expected.getDoctor()));
    }
}
