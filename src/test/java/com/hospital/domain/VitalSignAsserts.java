package com.hospital.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VitalSignAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVitalSignAllPropertiesEquals(VitalSign expected, VitalSign actual) {
        assertVitalSignAutoGeneratedPropertiesEquals(expected, actual);
        assertVitalSignAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVitalSignAllUpdatablePropertiesEquals(VitalSign expected, VitalSign actual) {
        assertVitalSignUpdatableFieldsEquals(expected, actual);
        assertVitalSignUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVitalSignAutoGeneratedPropertiesEquals(VitalSign expected, VitalSign actual) {
        assertThat(actual)
            .as("Verify VitalSign auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVitalSignUpdatableFieldsEquals(VitalSign expected, VitalSign actual) {
        assertThat(actual)
            .as("Verify VitalSign relevant properties")
            .satisfies(a -> assertThat(a.getMeasurementDate()).as("check measurementDate").isEqualTo(expected.getMeasurementDate()))
            .satisfies(a -> assertThat(a.getBloodPressure()).as("check bloodPressure").isEqualTo(expected.getBloodPressure()))
            .satisfies(a -> assertThat(a.getHeartRate()).as("check heartRate").isEqualTo(expected.getHeartRate()))
            .satisfies(a -> assertThat(a.getRespiratoryRate()).as("check respiratoryRate").isEqualTo(expected.getRespiratoryRate()))
            .satisfies(a -> assertThat(a.getTemperature()).as("check temperature").isEqualTo(expected.getTemperature()))
            .satisfies(a -> assertThat(a.getOxygenSaturation()).as("check oxygenSaturation").isEqualTo(expected.getOxygenSaturation()))
            .satisfies(a -> assertThat(a.getBloodSugar()).as("check bloodSugar").isEqualTo(expected.getBloodSugar()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVitalSignUpdatableRelationshipsEquals(VitalSign expected, VitalSign actual) {
        assertThat(actual)
            .as("Verify VitalSign relationships")
            .satisfies(a -> assertThat(a.getPatient()).as("check patient").isEqualTo(expected.getPatient()));
    }
}
