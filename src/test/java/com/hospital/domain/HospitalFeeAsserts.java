package com.hospital.domain;

import static com.hospital.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class HospitalFeeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHospitalFeeAllPropertiesEquals(HospitalFee expected, HospitalFee actual) {
        assertHospitalFeeAutoGeneratedPropertiesEquals(expected, actual);
        assertHospitalFeeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHospitalFeeAllUpdatablePropertiesEquals(HospitalFee expected, HospitalFee actual) {
        assertHospitalFeeUpdatableFieldsEquals(expected, actual);
        assertHospitalFeeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHospitalFeeAutoGeneratedPropertiesEquals(HospitalFee expected, HospitalFee actual) {
        assertThat(actual)
            .as("Verify HospitalFee auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHospitalFeeUpdatableFieldsEquals(HospitalFee expected, HospitalFee actual) {
        assertThat(actual)
            .as("Verify HospitalFee relevant properties")
            .satisfies(a -> assertThat(a.getServiceType()).as("check serviceType").isEqualTo(expected.getServiceType()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a ->
                assertThat(a.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getAmount())
            )
            .satisfies(a -> assertThat(a.getFeeDate()).as("check feeDate").isEqualTo(expected.getFeeDate()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHospitalFeeUpdatableRelationshipsEquals(HospitalFee expected, HospitalFee actual) {
        assertThat(actual)
            .as("Verify HospitalFee relationships")
            .satisfies(a -> assertThat(a.getAppointment()).as("check appointment").isEqualTo(expected.getAppointment()))
            .satisfies(a -> assertThat(a.getPatient()).as("check patient").isEqualTo(expected.getPatient()));
    }
}
