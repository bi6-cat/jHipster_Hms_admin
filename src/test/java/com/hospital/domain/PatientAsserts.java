package com.hospital.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PatientAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientAllPropertiesEquals(Patient expected, Patient actual) {
        assertPatientAutoGeneratedPropertiesEquals(expected, actual);
        assertPatientAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientAllUpdatablePropertiesEquals(Patient expected, Patient actual) {
        assertPatientUpdatableFieldsEquals(expected, actual);
        assertPatientUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientAutoGeneratedPropertiesEquals(Patient expected, Patient actual) {
        assertThat(actual)
            .as("Verify Patient auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientUpdatableFieldsEquals(Patient expected, Patient actual) {
        assertThat(actual)
            .as("Verify Patient relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getGender()).as("check gender").isEqualTo(expected.getGender()))
            .satisfies(a -> assertThat(a.getDob()).as("check dob").isEqualTo(expected.getDob()))
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientUpdatableRelationshipsEquals(Patient expected, Patient actual) {
        // empty method
    }
}
